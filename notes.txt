BuildConfig
-----------
public final class BuildConfig {...}
how to add build variables for this?

defaultConfig {
  ...
  buildConfigField "boolean", "automatedTests", "false"
}

productFlavors {
  QATesting {
    dimension "appSource"
    buildConfigField "String", "installSource", '"QATesting"'
    buildConfigField "boolean", "automatedTests", "true"
  }
}


To view all elements in UI inspector, expand the tree and toggle off "Filter System-Defined Layers"

Component Tree and Attributes are searchable

Android Espresso seems to use a similar synthax of hamcrest matchers

One way to know more about the states of the UI is to navigate the methods that checks them:
for example, isDisplayed() => by clicking on it, it takes us to the class VideMatchers.java, here we notice:
private final Matcher<View> visibilityMatcher = withEffectiveVisibility(Visibility.VISIBLE);
effective Visibility => 80% of the item needs to be visible for it to be considered visible
Also, visibiliyt is a an enum with 3 states:
public enum Visibility {
  VISIBLE(View.VISIBLE),
  INVISIBLE(View.INVISIBLE),
  GONE(View.GONE); => view do not exist in the view 
  
hasFocus() => matches views that usually editable
or elements that are navigated to via the tab button for example

isChecked() with for checkboxes and toggles

isSelected() => when a row or item is hilighted, this one depends on the Visibility state


++++++++++
NOTE: import com.example.android.architecture.blueprints.todoapp.R
The R file needs to be imported
++++++++++


View matchers
-------------
Locating views on the screen
it always statys with onView(ViewMatcher) and this function take a view mather to locate the UI

withId(...) if espresso locates multiple elements with the same ID on the screen, it will throw an exception
=> we must locate the item in a way to make it unique
instead of withId(...), we can also use withText(...)
even when fetching by text, it is always best to us the key, since the app can support multiple languages

we can also locate views with tag keys and tag values
android:tag="@string/title_hint" => key
and in string.xml, we have
<string name="title_hint">Title</string> => value

hasContentDescription() => any description 
withContentDescription(...) => you specify the value

onView(...) return an object with type ViewInteraction

withHint(...), same as before, the element itself has a hint attribute (android:hint)
we can use nullValue(String:class.java) to get an item that has a hint with no value

spinner is like a drop down menu
withSpinnerText(...)

hasLinks() matches a view that has a link in it


Input ViewMatchers
------------------
onView(hasImeAction(EditorInfo.IME_ACTION_NEXT))
onView(hasImeAction(EditorInfo.IME_ACTION_SEARCH))
onView(hasImeAction(EditorInfo.IME_ACTION_DONE))

EditorInfo => has much more actions thant the 3 above, you can check out the .java file like usual to get an idea on what they are

IME action is the action that is shown on the keyboard: for example, when typing in a search fied, you get the search icon instead of "Done"

supportInputMethod()

onView() takes 1 matcher, so you use functions liek allOf that take many matchers to traverse views from "hamcrest"
For example:
...
import org.hamcrest.CoreMatchers.allOf
...
onView(
    allOf(
        withId(R.id.value), isDescendantOfA(
            allOf(
                withId(R.id.sales), isDescendantOfA(
                    withId(R.id.current_month)
                )
            )
        )
    )
)
...

onView(
    allOf(
        withId(R.id.todo_title),
        withText("item 1")
    )
)

we can use isAssignableFrom(...) to match on the a views class or from its parent class
onView(isAssignableFrom(FloatingActionButton::class.java))
we can also use withClassName, which is more specific


Hierarchy view matcher
----------------------
matching a view based on its Hierarchy in the view tree
=> usefull when there is a need to traverse in case a layout or a view for example has little info to identify it in a unique maner given the current open view

isRoot() => it can be the view that holds the whole activity or fragment
or a view that holds a dialog in case of multi-window... etc 

in the case of an open dialog for example => isRoot() will match 2 views: the dialog and the activity behind it


Root Matchers 
-------------
 onView(...).inRoot(...)
isFocusable => clicking on elipses to open a popup menu
isTouchable => something you can interact with
isDialog => when the main view is hidden behind a dialog view
isPlatformPopup => you copy a text and you want to paste it a text filed, so you get options like, autofil, paste... etc


hamcrest matchers
-----------------
onView(
    allOf(
        withId(R.id.todo_title),
        withText("item 1")
    )
)

allOf famous matcher that allows creating more precise locators for views

for the rest of matchers, check the companion pdf 


How the Tests run 
-----------------
@RunWith(AndroidJUnit4::class) => required by espresso
open class BaseTest { => all test classes extend the base class

    /**
     * Selected activity will be launched before each test.
     */
    @get:Rule
    var activityScenarioRule = ActivityScenarioRule(TasksActivity::class.java) => this consumes the main activity for the app (when the app starts), in this case, it is the TasksActivity.java class
}


View action
-----------
The actions, like click, longClick... etc are written as arguments inside the .perform(...) call
.perform(pressBack()) => to click back 
alos the general click back can be performed: Espresso.pressBack()

When dealing keyboards, it is considered as a 3rd party application, and it can cause flakiness with the Tests
thus, after doing the needed actions on the keybaord, it is always important to close it: closeSoftKeyboard()

we also have methods like openLinkWithText(...) which would open a link


view assertions
---------------
doesNotExists() is different from not(isDisplayed())
we use check(...), for example .check(matches(isDisplayed()))

matches(x) => also accepts hamcrest matchers like allOf() and anyOf()
=> the important part here is to check the return types of all these function/method calls


Setting Up the device for Espresso
----------------------------------
Espresso does not like animations, they can block espresso test execution an cause flakiness
These can be turned off from developer options (if we want to do that manually that is)
Window, Transition and Animator animation scale => turn them off (can also be turned off via "adb" shell command or from code)

Accessibility: Touch and hold away: delay between the click and the content discription
=> can cause espresso long click to become like a regular click
So we set the value of touch and hold delay to "long" (2 sec, but you can set it to a bigger value using the commands below)
reduce the chance for clicks and long clicks to be treated as if they are the same

One source of flakiness is the keyboard. It is not actually part of the app you are testing but its own thing
if there is small delay in keyboard animation, the espresso might lick on the keyboard instead of the app
it is best to disable the sof keybaord

All of the above can be turned off from developer options, but when running the tests from the cloud for example,

adb: Android Debug Bridge

``` File ```
#!/usr/bin/env bash

# set touch and hold delay to 1500 milliseconds to avoid test flakiness
adb shell settings put secure long_press_timeout 2500

# disable soft keyboard
adb shell settings put secure show_ime_with_hard_keyboard 0

# enable developer options, set stay awake to true
adb shell settings put global development_settings_enabled 1
adb shell settings put global stay_on_while_plugged_in 1

# set animation values to 0.0
adb shell settings put global animator_duration_scale 0.0
adb shell settings put global transition_animation_scale 0.0
adb shell settings put global window_animation_scale 0.0
``` File ```

running the command on the emulator itself: remove keywords "adb shell"
This can also be done from the code itself in a before method:
@Before
fun setDevicePreferences() {
    // get the instance of the UI device
    val uiDevice = UiDevice.getInstance(InstrumentationRegistry.getInstrumentation())

    // System animation properties.
    uiDevice.executeShellCommand("settings put global animator_duration_scale 0")
    uiDevice.executeShellCommand("settings put global transition_animation_scale 0")
    uiDevice.executeShellCommand("settings put global window_animation_scale 0")

    // Touch & hold delay property.
    uiDevice.executeShellCommand("settings put secure long_press_timeout 2500")

    // Virtual keyboard appearance property.
    uiDevice.executeShellCommand("settings put secure show_ime_with_hard_keyboard 0")
}


Data interactions
-----------------
every list view is back by the data adapter
onData operates on the ListView here each item of the list is represented by the data object

when using onData(), you need to chain DataOption like inAdatpterView(withId(android.R.id.list))
basically telling espresso on which view you will be operating.
NOTE: here we are using android.R.id.list since we are dealing with a ListActivity
the id in the XML file would look something like this: id="@android:id/list" instead of id="@+id/list"


Recycler View
-------------
view that represents a large set of data
it recycles the views that are visible on the screen
for example, a long list with only 10 items appearing on the screen
so 1st we see itesm from 1 -> 10, then if we scroll to see item 11, then the place of item 1 will be taken by item 2... etc

You act on the recycler view using onView(...)
but when acting on its content, you need to specify the "T" paramter type and usually make use
of RecyclerViewActions (the function names usually end with substring "Position")
scrollToPosition<RecyclerView.ViewHolder>
actionOnItemAtPosition<RecyclerView.ViewHolder>

.perform(actionOnItemAtPosition<RecyclerView.ViewHolder>(10, scrollTo()))
OR can be done like this:
.perform(scrollToPosition<RecyclerView.ViewHolder>(10))

in the recycler view we can act on the single item, vs a list view where we can not which is why, for the latter, we act on the data 


Espresso test recorder
----------------------
Run -> Record Espresso Test
then you interact with the app, add assertions and click OK 
=> this will autogenerate code for you
=> you can select in which language the code gets generated: java or kotlin
But, this produces a lot of code, also, the test recorder consumes a lot of resources,
it make the machine very slow

in order to reduce the amount of generated code, you go to:
Android Studio -> preferences -> espresso test recorder
and reduce the depth options to "1" for example

the bigger the value of depth, the more specific to autogenerated locators are
but many a time, they might no be necessary and this ends up dumping way too much code

use this for learning and in case you are stuck on something,
but the outputed code should not be used as is, better reduce and optimize it


Kotlin DSL 
----------
For example
fun ViewInteraction.click(): ViewInteraction = perform(ViewActions.click())
=> basically what we are doing here is that we are using extention functions

or:
fun viewWithText(text: String): ViewInteraction = Espresso.onView(withText(text))
=> replacing functions with shorter versions

make sure to import your file with your changes and custom DSL if you need to


Interacting with WebView
------------------------
check cheat sheet in lesson 11
not Recommended for doing extensive web page tests
but of some simple checks and interactions only

for web page tests, use a web testing tool (like Cypress for example)

you might need to enable JS in case it is not not
onWebView().forceJavascriptEnabled()

an i-frame in a webview here is treated as if it s a separate window
so we need to use inWindow(...) to choose what to interact with, the original page or the i-frame

you can not use native espresso to interact with a web view
you will need to use stuff like webClick() instead of click()

in case in the web view, native android UI opens for the user to input data and so on
you will need to use regular espresso to interact with it

best used to test integration between the web view and the native android app
but again, use a web testing tool for extensive tests on the webview


Test size
---------
@SmallTest
@MediumTest
@LargeTest

=> these are annotations used to group tests
these can be applied to test classes or test functions

also, custom assertions can be created:
@smoke... etc
check: https://medium.com/@mohitgupta92/creating-custom-annotations-for-android-espresso-tests-56388025d637


Running the tests
-----------------
When running the tests on a emulator or device, you have to build and install both applications
- the app
- the test app (no to be confused with another variant or flavor of the app, which is not), it is its own thing

pm: in the commads means package manager
you can run the tests using gradle of adb

PS: instrumented tests mean they require a device or emulator

for the commands, refer to lesson_13 companion folder
you can run tests grouped in a package
you can run tests (fun) grouped in a class
you can run a test fun from a particular class
you can group test classes in a suite and run that

